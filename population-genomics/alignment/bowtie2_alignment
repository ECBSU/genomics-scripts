#!/bin/bash
#SBATCH --partition compute
#SBATCH --time 4-0
#SBATCH --mem=400G
#SBATCH --cpus-per-task 128
#SBATCH --nodes 1
#SBATCH --job-name=bowtie2_alignment_pt2
#SBATCH --output=/flash/HusnikU/vivienne/Palythoa/Jobs/202503/0303_bowtie2.log
#SBATCH --error=/flash/HusnikU/vivienne/Palythoa/Jobs/202503/0303_bowtie2.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=vivienne.gao@oist.jp

set -euo pipefail
set -x

#===============================================================================================#
#-------------Softwares--------------#
BOWTIE2='/path/to/bowtie2'
SAMTOOLS='/path/to/samtools'
#------------------------------------#

#---------------Inputs---------------#
RUN_DIR='/path/to/current/directory'
reference='/path/to/reference.fasta'
#------------------------------------#
#===============================================================================================#


# define set_software_path function - this way we only need to change the path in one place if we need to
set_software_paths() {
        # bowtie
        BOWTIE2_INDEX="${BOWTIE2}/bowtie2-build"
        BOWTIE2="${BOWTIE2}/bowtie2"

        # samtools
        SAMTOOLS="${SAMTOOLS}/samtools"

        return 0
}

#generate bowtie2 index if not already created
create_index() {

        #need to generate separate index with samtools and picard later on

        if ! ls "${RUN_DIR}"/*.bt2 &>/dev/null; then
                echo "Bowtie2 index not found. Generating index..."
                ${BOWTIE2_INDEX} -f --threads 128 "${reference}" "${RUN_DIR}/palythoa_index"
        else
            	echo "Bowtie2 index found. Skipping index generation."
        fi

	return 0
}


# define run bowtie2 function - runs bowtie2 alignment based on bowtie2 index (created above)
run_bowtie2() {

        echo "----------------------------"
        echo 'Running bowtie2'
        echo "----------------------------"

        local clean_sample_name="${SAMPLE//[ -]/_}"; clean_sample_name="${clean_sample_name//[()?]/}"
        echo ${clean_sample_name}
        echo "Checking for existing files for sample: ${clean_sample_name}"

        if [ ! -f "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam" ] && [ ! -f "${RUN_DIR}/${clean_sample_name}.sorted.bam" ]; then
                echo 'Running bowtie2 for' ${clean_sample_name}
                ${BOWTIE2} -f -q --reorder --threads 128 --time --very-sensitive-local --met-file "${RUN_DIR}/metrics.txt"  --met 30 -x "${RUN_DIR}/palythoa_index" -1 "${read_f}" -2 "${read_$
        else
            	echo "${clean_sample_name} alignment already exists. Skipping bowtie2 alignment."
        fi

	return 0
}


# samtools to convert bowtie2 .sam file to .bam file for downstream analysis
run_samtools() {

        echo "----------------------------"
        echo 'Running samtools'
        echo "----------------------------"

        local clean_sample_name="${SAMPLE//[ -]/_}"; clean_sample_name="${clean_sample_name//[()?]/}"

	#convert sam to bam - sort and mark duplicates
        if [ ! -f "${RUN_DIR}/${clean_sample_name}.sorted.bam" ] && [ ! -f "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam" ]; then # specifies to only run function if samples have not a$

                echo "Running samtools for" ${clean_sample_name}

                ${SAMTOOLS} collate --threads 128 -Ou "${RUN_DIR}/${clean_sample_name}.sam" | ${SAMTOOLS} fixmate --threads 128 -m - - | ${SAMTOOLS} sort --output-fmt BAM --threads 128 - -o $

                rm -f "${RUN_DIR}/${clean_sample_name}.sam" # remove sam file after conversion

        else
                echo "${clean_sample_name} sorted bam output already exists. Skipping."

        fi

	if [ ! -f "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam" ]; then

                ${SAMTOOLS} markdup --threads 128 -d 100 -s "${RUN_DIR}/${clean_sample_name}.sorted.bam" "${RUN_DIR}/${clean_sample_name}_markdup.bam"
                ${SAMTOOLS} sort --output-fmt BAM --threads 128 "${RUN_DIR}/${clean_sample_name}_markdup.bam" -o "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam"

                rm -f "${RUN_DIR}/${clean_sample_name}.sorted.bam"
                rm -f "${RUN_DIR}/${clean_sample_name}_markdup.bam"

                ${SAMTOOLS} index -b -@ 128 "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam" # generated index for BAM file - crucial for tools like genome viewers and downstream analysis
                ${SAMTOOLS} flagstat "${RUN_DIR}/${clean_sample_name}_markdup.sorted.bam" > "${RUN_DIR}/${clean_sample_name}.flagstat"
        else

            	echo "${clean_sample_name} samtools output already exists. Skipping."

        fi

	return 0

}


main() {
        ## Create running directory if doesn't exist
        mkdir -p "${RUN_DIR}"
        cd "${RUN_DIR}" || exit

        ## Set software paths
        set_software_paths

        create_index

        while IFS=, read -r SAMPLE read_f read_r; do
                if [[ "${SAMPLE}" == "sample" || "${SAMPLE}" == \#* ]]; then
                        continue
                fi

                if [[ "$read_f" == "Missing" ]]; then
                        echo "Skipping sample ${SAMPLE} due to missing forward read"
                        continue
                fi

                # extract the first vale for read_r, ignoring any additional ones
                read_r=${read_r%%,*}

                echo "----------------------------"
                echo "                            "
                echo "Processing sample:${SAMPLE}"
                echo "                            "
                echo "----------------------------"

                run_bowtie2
                run_samtools

        done < '/path/to/csv/file/with/samples/and/reads.csv'

        echo 'ALL JOBS COMPLETED'

        return 0
}


# Execute main function
main


