#!/bin/bash
#SBATCH --partition compute
#SBATCH --time 4-0
#SBATCH --mem=200G
#SBATCH --cpus-per-task 128
#SBATCH --nodes 1
#SBATCH --job-name=1101_samtools_coverage_palythoa
#SBATCH --output=/flash/HusnikU/vivienne/Palythoa/Jobs/202411/1101_samtools_coverage_palythoa.log
#SBATCH --error=/flash/HusnikU/vivienne/Palythoa/Jobs/202411/1101_samtools_coverage_palythoa.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=vivienne.gao@oist.jp

set -euo pipefail # set script to fail if encounters common errors
set -x # enables debugging

#===============================================================================================#

#-------------Softwares--------------#
SAMTOOLS='/apps/unit/HusnikU/samtools-1.15.1'
#------------------------------------#

#---------------Inputs---------------#
RUN_DIR='/flash/HusnikU/vivienne/Palythoa/Jobs/202411'
INPUT_DIR='/flash/HusnikU/vivienne/Palythoa/Jobs/202410/bowtie2' # path to BAM files generated by bowtie2
#------------------------------------#

#===============================================================================================#

# set software paths
set_software_paths() {
        #samtools
        SAMTOOLS_DEPTH='/apps/unit/HusnikU/samtools-1.15.1/samtools depth' # path to samtools depth command

        return 0

}

# average coverage from BAM files
samtools_depth() {

        # generate a combined output file showing the average coverage for all the samples
        output_file="${RUN_DIR}/combined_average_coverage.txt"
        echo "Sample, Average coverage" > "${output_file}"      # creates a header row for clarity

        #get average coverage from bam files
        for bam_file in "${INPUT_DIR}"/*.sorted.bam; do # for every BAM file in bowtie2 directory
                base_name=$(basename "${bam_file}"_bowtie2.sorted.bam) # extract sample name for clarity

                # calculate average coverage using samtools depth, -a specifies all positions, and append to combined output file
                average_coverage=$(${SAMTOOLS_DEPTH} -a ${bam_file} | awk '{sum+=$3; count++} END {if (count>0) print sum/count; else print 0}') #for each line of input, add $3 value to total running sum, increa$
                echo "${base_name},${average_coverage}" >> "${output_file}"

        done

	return 0

}

main() {

        # make directory if it does not exist
        mkdir -p "${RUN_DIR}"
        cd "${RUN_DIR}" || exit

        # set software paths
        set_software_paths

        # run coverage command
        samtools_depth

        return 0

}

# run main function
main
